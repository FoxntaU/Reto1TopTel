# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import service_pb2 as service__pb2

GRPC_GENERATED_VERSION = '1.66.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class SearchsuccStub(object):
    """Servicio que expone el método lookupID
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LookupID = channel.unary_unary(
                '/service.Searchsucc/LookupID',
                request_serializer=service__pb2.LookupIDRequest.SerializeToString,
                response_deserializer=service__pb2.LookupIDResponse.FromString,
                _registered_method=True)


class SearchsuccServicer(object):
    """Servicio que expone el método lookupID
    """

    def LookupID(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearchsuccServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LookupID': grpc.unary_unary_rpc_method_handler(
                    servicer.LookupID,
                    request_deserializer=service__pb2.LookupIDRequest.FromString,
                    response_serializer=service__pb2.LookupIDResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.Searchsucc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.Searchsucc', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Searchsucc(object):
    """Servicio que expone el método lookupID
    """

    @staticmethod
    def LookupID(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.Searchsucc/LookupID',
            service__pb2.LookupIDRequest.SerializeToString,
            service__pb2.LookupIDResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class JoinnodeStub(object):
    """Servicio que expone el método JoinNode
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.JoinNode = channel.unary_unary(
                '/service.Joinnode/JoinNode',
                request_serializer=service__pb2.JoinRequest.SerializeToString,
                response_deserializer=service__pb2.JoinResponse.FromString,
                _registered_method=True)


class JoinnodeServicer(object):
    """Servicio que expone el método JoinNode
    """

    def JoinNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JoinnodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'JoinNode': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinNode,
                    request_deserializer=service__pb2.JoinRequest.FromString,
                    response_serializer=service__pb2.JoinResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.Joinnode', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.Joinnode', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Joinnode(object):
    """Servicio que expone el método JoinNode
    """

    @staticmethod
    def JoinNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.Joinnode/JoinNode',
            service__pb2.JoinRequest.SerializeToString,
            service__pb2.JoinResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class UpdateSuccessorStub(object):
    """Servicio que expone el método UpdateSuccessor
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateSuccessor = channel.unary_unary(
                '/service.UpdateSuccessor/UpdateSuccessor',
                request_serializer=service__pb2.UpdateSuccessorRequest.SerializeToString,
                response_deserializer=service__pb2.UpdateSuccessorResponse.FromString,
                _registered_method=True)


class UpdateSuccessorServicer(object):
    """Servicio que expone el método UpdateSuccessor
    """

    def UpdateSuccessor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UpdateSuccessorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateSuccessor': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateSuccessor,
                    request_deserializer=service__pb2.UpdateSuccessorRequest.FromString,
                    response_serializer=service__pb2.UpdateSuccessorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'service.UpdateSuccessor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('service.UpdateSuccessor', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class UpdateSuccessor(object):
    """Servicio que expone el método UpdateSuccessor
    """

    @staticmethod
    def UpdateSuccessor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/service.UpdateSuccessor/UpdateSuccessor',
            service__pb2.UpdateSuccessorRequest.SerializeToString,
            service__pb2.UpdateSuccessorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
